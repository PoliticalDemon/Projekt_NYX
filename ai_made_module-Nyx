import numpy as np

class Neuron:
    def __init__(self, input_size=3):
        self.input_size = input_size
        self.inputs = np.zeros(input_size)
        self.weights = np.random.uniform(0, 1, input_size)
        self.bias = 0.1

    def set_inputs(self, inputs):
        if len(inputs) != self.input_size:
            raise ValueError("Incorrect number of inputs")
        self.inputs = np.array(inputs)

    def tanh_activation(self, x):
        return np.tanh(x)

    def compute_output(self):
        total = np.dot(self.inputs, self.weights) + self.bias
        activated = self.tanh_activation(total)
        # Convert [-1, 1] to [0, 100] probability
        return round((activated + 1.0) * 50.0, 2)

if __name__ == "__main__":
    nyx = Neuron()

    # Example: [Unrest, Gov Response, External Influence]
    test_input = [0.6, 0.3, 0.5]
    nyx.set_inputs(test_input)
    
    output = nyx.compute_output()
    print(f"Predicted Conflict Probability: {output}%")